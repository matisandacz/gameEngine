VIDEO SERIES: https://www.youtube.com/playlist?list=PLdPphdv2-02jr6QT5UXTLas0Mg4HiVclu + https://www.youtube.com/playlist?list=PLdPphdv2-02hgtmx5WaC0yV8BE8FgmlTz
THECHERNO FOR OPENGL:https://www.youtube.com/watch?v=Bcs56Mm-FJY&t=362s


1) Drawing a window to the screen.
2) Adding event callback functions.
3) Adding Delta time and Scene. TODO: Multiple Scenes support.
4) Rendering a square to the screen using openGL and understand: Vertex Buffer (VBO) + Element Buffer (EBO) w/ drawElements +
Laying out Vertex Buffer w/ VertexAttribPointer + Verex Array (VAO) Avoid binding VBO and Layout every time. Save config.

--------------------------

TheCherno: 13-17.
5) Abstracting openGL into classes.
.) Extract vertex buffer and index buffer into classes. OK
.) Extract vertex array
.) Extract shaders. OK.

6) Creating a CAMERA.
TODO: We need to convert vertices to canonical view volume [-1,1] ** 3.
How?
Book: Mvp (Not needed in openGl, creo. Se encarga de mandar todo a la pantalla) <- Orthographic projection <- Camera
Forma 2) Reemplazo Ortographic por: Orthographic<-Perspective

Otra: POV. ESTA!!
(tp4, me deja todo en canonico) PERSPECTIVE DE POV<-CAMERA TRANSFORMS.

Los parametros van a controlar la ccamera transform.
Gralmente la perspective va a quedar fija.

PREGUNTA: PORQUE BORRE EL VERTEX BUFFER Y ANDA IGUAL WTF......


7) Textures
ThinMatrix: 9-10
8) Loading 3D Models.

